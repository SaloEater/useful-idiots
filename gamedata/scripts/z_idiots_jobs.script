local WP = world_property
local U  = z_idiots_utils
local C  = z_idiots_companions


EVAL_ITEMS  = stalker_ids.property_items
EVAL_GATHER = xr_gather_items.evaid
EVAL_CORPSE = xr_evaluators_id.corpse_exist
EVAL_HEAL   = xr_evaluators_id.wounded_exist
ACTION_BEH  = axr_beh.beh_actid


local __help_wounded_evaluate = xr_help_wounded.evaluator_wounded_exist.evaluate
local __beh_add_to_binder     = axr_beh.add_to_binder
local __corpse_add_to_binder  = xr_corpse_detection.add_to_binder
local __gather_add_to_binder  = xr_gather_items.add_to_binder
local __corpse_initialize     = xr_corpse_detection.action_search_corpse.initialize
local __gather_initialize     = xr_gather_items.act_gather_itm.initialize
local __corpse_finalize       = xr_corpse_detection.action_search_corpse.finalize
local __gather_finalize       = xr_gather_items.act_gather_itm.finalize
local __is_assigned_item      = axr_companions.is_assigned_item


-- patch: enable help_wounded for companions
function xr_help_wounded.evaluator_wounded_exist:evaluate()
  if U.isCompanion(self.object) then
    local st  = self.a
    local npc = self.object

    if not st.help_wounded_cond then
      st.help_wounded_cond = xr_logic.parse_condlist(npc, "beh", "help_wounded_enabled", st.help_wounded_enabled)
    end

    st.help_wounded_enabled = xr_logic.pick_section_from_condlist(db.actor, npc, st.help_wounded_cond) == "true"
  end

  return __help_wounded_evaluate(self)
end


-- stores items collected by companions
LOOT_SHARED_ITEMS = {}
LOOT_SHARING_NPCS = {}


-- patch: enable gather_items, corpse_detection, and help_wounded for companions
-- by preventing axr_beh from activating if one of them can be active
function axr_beh.add_to_binder(npc, ...)
  __beh_add_to_binder(npc, ...)

  if not U.isCompanion(npc) then
    return
  end

  local manager = npc:motivation_action_manager()
  local action  = manager:action(ACTION_BEH)

  if (schemes.gather_items) then
    action:add_precondition(WP(EVAL_GATHER, false))
  end

  if (schemes.corpse_detection) then
    action:add_precondition(WP(EVAL_CORPSE, false))
  end

  if (schemes.help_wounded) then
    action:add_precondition(WP(EVAL_HEAL, false))
  end

  action:add_precondition(WP(EVAL_ITEMS, false))
end


-- patch: disable corpse_detection for non-companion NPCs
function xr_corpse_detection.add_to_binder(npc, ...)
  __corpse_add_to_binder(npc, ...)

  local manager = npc:motivation_action_manager()

  if manager and not U.isCompanion(npc) then
    manager:add_evaluator(EVAL_CORPSE, property_evaluator_const(false))
  end
end


-- patch: disable gather_items for non-companion NPCs
function xr_gather_items.add_to_binder(npc, ...)
  __gather_add_to_binder(npc, ...)

  local manager = npc:motivation_action_manager()

  if manager and not U.isCompanion(npc) then
    manager:add_evaluator(EVAL_GATHER, property_evaluator_const(false))
  end
end


-- patch: start tracking looted items for inventory availability
function xr_corpse_detection.action_search_corpse:initialize()
  if U.isCompanion(self.object) then
    LOOT_SHARING_NPCS[self.object:id()] = true
  end
  __corpse_initialize(self)
end


-- patch: start tracking gathered items for inventory availability
function xr_gather_items.act_gather_itm:initialize()
  if U.isCompanion(self.object) then
    LOOT_SHARING_NPCS[self.object:id()] = true
  end
  __gather_initialize(self)
end


-- patch: stop tracking looted items
function xr_corpse_detection.action_search_corpse:finalize()
  if U.isCompanion(self.object) then
    LOOT_SHARING_NPCS[self.object:id()] = nil
  end
  __corpse_finalize(self)
end


-- patch: stop tracking gathered items
function xr_gather_items.act_gather_itm:finalize()
  if U.isCompanion(self.object) then
    LOOT_SHARING_NPCS[self.object:id()] = nil
  end
  __gather_finalize(self)
end


-- patch: make tracked items available in companion inventory
function axr_companions.is_assigned_item(npcID, itemID)
  if U.isCompanion(npcID) and LOOT_SHARED_ITEMS[itemID] then
    return true
  end
  return __is_assigned_item(npcID, itemID)
end


-- make tracked items available when taken
function onTakeItem(npc, item)
  if U.isCompanion(npc) and LOOT_SHARING_NPCS[npc:id()] then
    LOOT_SHARED_ITEMS[item:id()] = true
  end
end


-- clear tracked items when despawning
function onEntityUnregister(entity)
  LOOT_SHARED_ITEMS[entity.id] = nil
end


-- store tracked items in game save
function onSaveItemState(mdata)
  mdata.IDIOTS_SHARED_ITEMS = LOOT_SHARED_ITEMS
  mdata.IDIOTS_SHARING_NPCS = LOOT_SHARING_NPCS
end


-- load tracked items from game save
function onLoadItemState(mdata)
  if mdata.IDIOTS_SHARED_ITEMS then
    LOOT_SHARED_ITEMS = mdata.IDIOTS_SHARED_ITEMS
  end
  if mdata.IDIOTS_SHARING_NPCS then
    LOOT_SHARING_NPCS = mdata.IDIOTS_SHARING_NPCS
  end
end


function on_game_start()
  RegisterScriptCallback("npc_on_item_take", onTakeItem)
  RegisterScriptCallback("server_entity_on_unregister", onEntityUnregister)
  RegisterScriptCallback("save_state", onSaveItemState)
  RegisterScriptCallback("load_state", onLoadItemState)
end
